{"version":3,"sources":["component/TodoItem/TodoItem.module.css","component/Header/Header.js","component/Practice/Practice.js","component/TodoCount/TodoCount.js","component/TodoItem/TodoItem.js","Context.js","component/TodoList/TodoList.js","component/InputTodo/InputTodo.js","component/Practice/AlertButton.js","Pages/About.js","Pages/NotMatch.js","component/Navbar.js","Pages/Contact.js","component/TodoContainer/TodoContainer.js","index.js"],"names":["module","exports","Header","style","padding","lineHeight","fontSize","fontWeight","marginBottom","color","textTransform","textAlign","React","Component","TodoCount","props","completedTodos","todosProp","filter","todoObject","completed","length","TodoItem","className","styles","item","checkbox","type","checked","onChange","handleChangeProp","id","display","onDoubleClick","console","log","fontStyle","opacity","textDecoration","children","onClick","delTodoProp","TodosContext","createContext","TodosProvider","Provider","TodoList","context","this","todos","map","todo","title","contextType","InputTodo","useState","setTitle","onSubmit","e","preventDefault","trim","addTodoProp","alert","name","placeholder","value","target","size","About","NotMatch","Navbar","to","Contact","action","required","TodoContainer","handleChange","setState","state","todoObj","addTodo","newTodo","uuidv4","delTodo","newTodos","fetch","then","res","json","jsonData","previousProps","previousState","JSON","stringify","localStorage","setItem","path","exact","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7953a043.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"TodoItem_item__QjBcZ\",\"checkbox\":\"TodoItem_checkbox__3eKU-\"};","const Header = () => {\n  \n  const h1Style = {\n    fontSize: \"6rem\",\n    fontWeight: \"600\",\n    marginBottom: \"2rem\",\n    lineHeight: \"1em\",\n    color: \"#ececec\",\n    textTransform: \"lowercase\",\n    textAlign: \"center\",\n  };\n\n  return (\n    <header style={{\n      padding: \"20px 0\",\n      lineHeight: \"1.5em\"\n    }}>\n      <h1 style={h1Style}>\n        byju's <br></br>\n        todos\n      </h1>\n    </header>\n  )\n}\n\nexport default Header;","import React, { useState } from \"react\";\n\nfunction Practice() {\n\n  const [someText, setSomeText] = useState(\"Hallo Reacter!\");\n  const [names, setNames] = useState([\"Manuel\", \"Christian\", \"Alina\"]);\n  \n  const [text, setText] = useState(\"Ich bin ein State als Hook!\");\n\n  //Alternative: ein state mit Object\n  const [state, setState] = useState({\n    title: \"\",\n    text: \"Ich bin ein 'Object-State' als Hook!\"\n  });\n\n\n\n  const handleWordChange = () => {\n    setSomeText(\"Hallo Welt!\");\n  }\n\n  const nameChanger = () => {\n\n    const newNamesArray = names.map(name => {\n      return `Hello ${name}`\n    })\n    setNames(newNamesArray);\n  }\n\n\n  return (\n    <div className=\"nur-zum-lernen\" style={{ marginTop: \"20px\" }}>\n      <h3>Nur zum üben</h3>\n      <p>{someText}</p>\n      <button\n        onClick={handleWordChange}\n      >\n        Ändere oberen Text\n      </button>\n      <ul>\n        {names.map((name, i) => {\n          return <li key={i}>{name}</li>\n        })}\n        {/* { [<li>Manuel</li>, <li>Christian</li>, <li>Alina</li>] } */}\n      </ul>\n      <button\n        onClick={nameChanger}\n      >\n        Hello!\n      </button>\n      <br />\n      <hr />\n      <br />\n      <span\n        onClick={() => { setText('Ich wurde angeklickt 👽') }}\n      >\n        {text}\n      </span>\n      <span\n        onClick={() => {\n          setState({\n            ...state, //destructering notwendig bei useState, da nicht automatisch gemerged wird\n            text: 'ich wurde angeklickt'\n          })\n        }}\n      >\n        {state.text}\n      </span>\n    </div>\n  );\n}\n\nclass PracticeClass extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      someText: \"Hallo Reacter!\",\n      names: [\"Manuel\", \"Christian\", \"Alina\"]\n    }\n  }\n\n  handleWordChange = () => {\n    this.setState({\n      someText: \"Hallo Welt!\"\n    });\n  }\n\n  nameChanger = () => {\n    this.setState({\n      names: this.state.names.map(name => {\n        return `Hello ${name}`\n      })\n    });\n\n    // ToDo in Zukunft: Eigentlich auch hier Callback benutzen\n  }\n\n  render() {\n    return (\n      <div className=\"nur-zum-lernen\">\n        <h3>Nur zum üben</h3>\n        <p>{this.state.someText}</p>\n        <button\n          onClick={this.handleWordChange}\n        >\n          Ändere oberen Text\n        </button>\n        <ul>\n          {this.state.names.map((name, i) => {\n            return <li key={i}>{name}</li>\n          })}\n          {/* { [<li>Manuel</li>, <li>Christian</li>, <li>Alina</li>] } */}\n        </ul>\n        <button\n          onClick={this.nameChanger}\n        >\n          Hello!\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Practice;\n\n/*\nHinweis:\n\nWir benutzen in der render Funktion wieder map. DAher brauchen wir\neinen key. In diesem Fall benutzen wir den index als key. Das ist\neigentlich keine gute Praxis, wenn wir z.B. die Namen löschen\nund erweitern würden. In diesem Fall würde sich der INdex nämlich ändern\nund plötzlich hätte vielleicht ein Element eine andere ID.\nMehr dazu: https://programmingwithmosh.com/react/why-do-i-need-keys-in-react-lists/\n\nIn unserem Fall hier ist es aber ok\n\n*/","const TodoCount = (props) => {\n\n  // filter erstellt uns hier ein neues Array mit Objecten (also Todos)\n  // die \"completed:true\" haben\n  const completedTodos = props.todosProp.filter( todoObject => {\n    return todoObject.completed === true;\n  });\n\n  return (\n    <p>\n      {completedTodos.length}/{props.todosProp.length} Todos erledigt\n    </p>\n  );\n};\n\nexport default TodoCount;","import {Component} from \"react\";\nimport { FaTrash } from \"react-icons/fa\"\nimport styles from \"./TodoItem.module.css\";\n\nconst TodoItem = (props) => {\n\n  const completedStyle = {\n    fontStyle: \"italic\",\n    color: \"#595959\",\n    opacity: 0.4,\n    textDecoration: \"line-through\",\n  }\n\n  // Alternative zum ternären Operator hinsichtlich completedStyle\n  // siehe unten\n\n  const handleEdit = () => {\n    console.log('edit mode activated');\n    // In Zukunft (optional): implementieren\n    // Tutorial: https://ibaslogic.com/how-to-edit-todos-items-in-react/\n\n  };\n\n  return (\n    <li className={styles.item}>\n      <input\n        className={styles.checkbox}\n        type=\"checkbox\" \n        checked ={props.completed}\n        onChange={ ()=>{props.handleChangeProp(props.id)} }\n      />\n      <div style={{display:\"inline-block\"}} onDoubleClick={handleEdit}>\n        <span style={props.completed ? completedStyle : null}>\n          {props.children}\n        </span>\n        {/* Hier später Input Element hinzufügen (für edit Funktion) */}\n      </div>  \n      \n      <button\n        onClick={ () => {props.delTodoProp(props.id)} }\n      >\n        <FaTrash style={{ color: \"orangered\", fontSize: \"16px\" }} />\n      </button>\n    </li>\n  )\n};\n\n\n// nachfolgend: Componente als class, um componentWillUnmount()\n// zu zeigen\nclass TodoItemWithLifecycleMethods extends Component {\n\n\n  // Alternative zum ternären Operator hinsichtlich completedStyle\n  // siehe unten\n\n  handleEdit = () => {\n    console.log('edit mode activated');\n    // In Zukunft (optional): implementieren\n    // Tutorial: https://ibaslogic.com/how-to-edit-todos-items-in-react/\n\n  }\n\n  componentDidMount() {\n    // Hier z.B. setIntervall starten\n\n  }\n\n  componentWillUnmount() {\n    // wird ausgeführt, before die Komponente entfernt wird\n    alert('TodoItem wird nun entfernt');\n    // Um \"Aufräumarbeiten\" durchzuführen\n    // z.B. setIntervall anzubrechen\n  }\n\n  render() {\n    const completedStyle = {\n      fontStyle: \"italic\",\n      color: \"#595959\",\n      opacity: 0.4,\n      textDecoration: \"line-through\",\n    }\n    return (\n      <li className={styles.item}>\n        <input\n          className={styles.checkbox}\n          type=\"checkbox\" \n          checked ={this.props.completed}\n          onChange={ ()=>{this.props.handleChangeProp(this.props.id)} }\n        />\n        <div style={{display:\"inline-block\"}} onDoubleClick={this.handleEdit}>\n          <span style={this.props.completed ? completedStyle : null}>\n            {this.props.children}\n          </span>\n          {/* Hier später Input Element hinzufügen (für edit Funktion) */}\n        </div>  \n        \n        <button\n          onClick={ () => {this.props.delTodoProp(this.props.id)} }\n        >\n          Delete\n        </button>\n      </li>\n    )\n  }\n};\n\n\n\nexport default TodoItem;\n// export default TodoItemWithLifecycleMethods\n\n// props.children:\n// gibt aus, was zwischen dem\n// öffnenden <TodoItem> und \n// schließenden </TodoItem> Tags steht\n\n\n\n  // Alternative zum ternären Operator hinsichtlich completedStyle\n\n  // let todoTextStyle = null;\n  // if(props.completed) {\n  //   todoTextStyle = completedStyle;\n  // }\n  // Entsprechend in span style \"todoTextStyle\" benutzen","import React,{ Component } from \"react\";\n\nconst TodosContext = React.createContext();\n\nconst TodosProvider = TodosContext.Provider;\n// const TodosConsumer = TodosContext.Consumer;\n\nclass MyContext extends Component {\n\n  state = {\n    todos: [\n      {\n        id: 1,\n        title: \"Setup development environment\",\n        completed: true,\n      },\n      {\n        id: 2,\n        title: \"Develop website and add content\",\n        completed: false,\n      },\n      {\n        id: 3,\n        title: \"Deploy to live server\",\n        completed: false,\n      },\n    ],\n  };\n\n  handleChange = (id) => {\n    console.log('checkbox clicked:', id);\n\n\n    this.setState({\n      todos: this.state.todos.map(todoObj => {\n        if (todoObj.id === id) {\n          return {\n            ...todoObj,\n            completed: !todoObj.completed\n          }\n        }\n        return todoObj;\n\n      }) // END of map\n    });\n  }\n\n  addTodo = (title) => {\n    console.log(title);\n\n    const newTodo = {\n      id: 5,\n      title: title,\n      completed: false\n    };\n    this.setState({\n      todos: [newTodo, ...this.state.todos]\n    });\n\n    // [...this.state.todos, newTodo]\n    // kopiert sozusagen unser todosArray und fügt\n    // unserer newTodo als erstes Element hinzu\n  }\n\n  delTodo = (id) => {\n\n\n    const newTodos = this.state.todos.filter(todo => {\n      return todo.id !== id;\n    });\n\n    this.setState({ todos: newTodos });\n\n    // Todo Zukunft: Hier eigentlich wieder besser: callback \n    // function als Parameter für setState\n  }\n\n  \n  render() {\n    return (\n      <TodosProvider value={{\n        ...this.state,\n        handleChange: this.handleChange,\n        delTodo: this.delTodo,\n        addTodoItem: this.addTodo,\n        }}>\n\n        {this.props.children}\n      </TodosProvider>\n    )\n  }\n}\n\nexport { TodosContext, MyContext}","//Aufgabe: Erstelle Component, die <p>Ich bin die TodoListe</p> ausgibt\n// fügt sie TodoContainer hinzu und rendert sie dort\nimport React from \"react\";\nimport TodoItem from \"../TodoItem/TodoItem.js\";\nimport { TodosContext } from \"../../Context\";\n\n// Prop in functional component\n// const TodoList = (props) => {\n\n//   console.log(props)\n// }; \n\nclass TodoList extends React.Component {\n\n  static contextType = TodosContext;\n  // dadurch haben wir mittels this.context\n  // Zgugriff auf den context bzw. dessen\n  // value\n\n\n  render() {\n    const context = this.context;\n    //context beinhaltet jetzt alles, was wir in Context.js\n    // bei value übergeben haben\n\n    // this.props.todos: Zugriff auf die\n    // prop \"todos\" => Zugriff auf todo-state bzw.-todo Array\n\n    //unique key/einmaliger key: Hilft sozusagen react\n    // effizienter zu arbeiten\n    return (\n      <ul>\n        {context.todos.map(todo => {\n          //console.log('todo.title in this.props.todosProp.map:', todo.title);\n          return (\n            <TodoItem key={todo.id} todo={todo}>\n              {todo.title/* wird als prop.children übergeben */} \n            </TodoItem>\n          );\n        })}\n      </ul>\n    )\n  }\n}\n\nexport default TodoList;\n\n\n// ERKLÄRUNGEN\n//todo parameter in map (this.props.todosProp.map(todo...)\n// beinhaltet immer das aktuelle todo-Object. Z.B:\n// {\n//   id: 1,\n//   title: \"React lernen\",\n//   completed: true\n// }\n\n\n// Object in constante\n// let todo = {\n//   id: 1,\n//   title: \"React lernen\",\n//   completed: true\n// }\n// alert( todo.completed );\n\n","import React, { Component, useState } from \"react\";\nimport { FaPlusCircle } from \"react-icons/fa\";\n\nimport \"./InputTodo.css\";\n\n\n// als functional component\nfunction InputTodo(props) {\n\n  // 1. Variable title => beinhaltet state \n  // 2. Variable setTitle => beinhaltet function zum Ändern des States\n  const [title, setTitle] = useState(\"\"); // setzt initial state title auf \"\"\n  // quasi gleichbedeutend mit\n  // const title = useState(\"\")[0];\n  // const setState = useState(\"\")[1];\n\n  const onChangeHandler = (e) => {\n    setTitle(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault(); // vermeide Abschicken des Formulars\n\n    console.log(title);\n\n    if (title.trim() !== \"\") { //Title ist nicht leer\n      props.addTodoProp(title.trim());\n\n      // Input Feld leeren\n      setTitle(\"\");\n\n    } else {\n      alert('Bitte Item reinschreiben!')\n    }\n\n  }\n\n\n  return (\n    <>\n      <form\n        onSubmit={handleSubmit}\n        className=\"form-container\"\n      >\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Add Todo...\"\n          value={title}\n          onChange={onChangeHandler}\n          className=\"input-text\"\n        />\n        <button className=\"input-submit\">\n          <FaPlusCircle color=\"darkcyan\" size=\"20px\"  />\n        </button>\n\n      </form>\n    </>\n  )\n\n}\n\n\n\n// Class Component mit ES6 syntx (also mit constructor)\nclass InputTodoClass extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      title: \"\"\n    }\n  }\n  onChangeHandler = (e) => {\n    // [e.target.name] : dynamische Vergabe der Eigenschaft\n    // eines Objects\n    this.setState({\n      [e.target.name]: e.target.value\n    });\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault(); // vermeide Abschicken des Formulars\n    // console.log(this.state.title);\n\n    if (this.state.title.trim() !== \"\") { //Title ist nicht leer\n      this.props.addTodoProp(this.state.title.trim());\n\n      // Input Feld leeren\n      this.setState({\n        title: \"\"\n      });\n\n    } else {\n      alert('Bitte Item reinschreiben!')\n    }\n\n    // trim entfernt Whitespace (z.B. Leerzeichen) am Anfang\n    // und am Ende eines Strings und gibt diesen zurück\n  }\n\n  render() {\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        className=\"form-container\"\n      >\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Add Todo...\"\n          value={this.state.title}\n          onChange={this.onChangeHandler}\n          className=\"input-text\"\n        />\n        <button className=\"input-submit\">Add +</button>\n      </form>\n    )\n  }\n}\nexport default InputTodo;\n\n// Exkurs: ES7 Syntax (wie im Tutorial)\n\nclass InputTodoEs7 extends Component {\n\n  state = {\n    title: \"\"\n  }\n\n  render() {\n    return (\n      <form>\n        <input type=\"text\" placeholder=\"Add Todo...\" />\n        <button>Submit</button>\n        Zugriff erfolgt auch mit this: {this.state.title}\n      </form>\n    )\n  }\n}","import React from \"react\";\n\n// Übersicht Class und Functional Component\n\nclass AlertButton extends React.Component {\n\n  // wenn wir einen state haben, können wir das im constructor() realiseren\n\n  clickHandler = () => {\n    alert(this.props.msg);\n    console.log(this.props.msg);\n  }\n\n  render() {\n    const buttonStyle = {\n      backgroundColor: \"red\",\n      color: \"white\",\n      borderRadius: \"15px\",\n      padding:\"10px\"\n    };\n    return (\n      <button\n        style={buttonStyle}\n        onClick={this.clickHandler}\n      >\n        {this.props.children}\n      </button>\n    );\n  }\n\n}\n\n// Realisiere obere Component als functional component\n\nconst AlertButtonFunc = (props) => {\n\n  const clickHandler = () => {\n    alert(props.msg);\n    console.log(props.msg);\n  };\n\n  const buttonStyle = {\n    backgroundColor: \"red\",\n    color: \"white\",\n    borderRadius: \"15px\",\n    padding:\"10px\"\n  };\n\n  return (\n    <button\n      style={buttonStyle}\n      onClick={clickHandler}\n    >\n      {props.children}\n    </button>\n  );\n}\n\nexport default AlertButton;\n// export default AlertButtonFunc;\n","const About = () => {\n  return(\n  <h3>Hello form About Us page!</h3>\n  );\n};\n\nexport default About;\n","const NotMatch = () => {\n  return (\n    \n      <h3>Hello!!! NotMatch from todo App!</h3>\n    \n  );\n};\n\nexport default NotMatch;\n","import { NavLink } from \"react-router-dom\";\nimport \"./Navbar.css\";\n\nconst Navbar = () => {\n  return(\n    <nav className=\"topNav\">\n      <ul>\n        <li><NavLink to=\"/\">Home</NavLink></li>\n        <li><NavLink to=\"/about\">About</NavLink></li>\n        <li><NavLink to=\"/contact\">Contact</NavLink></li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Navbar;","const Contact = () => {\n  return (\n    <div>\n      {/* <h3>Hello form Contact Us page!</h3>\n      <p>Byjupaul Madathumpadi <br />\n          Schwalbenweg 4 <br />\n          51789 Lindlar <br />\n          Email: byjupaulmp@gmail.com <br />\n          Mob: 017669839435\n\n      </p> */}\n      <form action=\"\" onSubmit=\"\">\n          <div className=\"formWord\">\n            <h2>Say Hello!</h2>\n            <span>Full Name</span>\n            <br />\n            <input \n            className=\"input100\"\n            type=\"text\"\n            name=\"fullName\"\n            required \n            />\n            <br />\n            <span>Phone Number</span>\n            <br />\n            <input className=\"input100\" type=\"number\" name=\"phone\" required />\n            <br />\n            <span>Enter Email</span>\n            <br />\n            <input className=\"input100\" type=\"email\" name=\"email\" required />\n            <br />\n          </div>\n          <div className=\"formWord\">\n            <span>Message</span>\n            <br />\n            <textarea name=\"message\" required></textarea>\n            <br />\n            <button>SUBMIT</button>\n\n            <div className=\"row\"></div>\n          </div>\n      </form>\n      </div>\n    \n  );\n};\n\nexport default Contact;\n","import React from \"react\";\nimport Header from \"../Header/Header.js\";\nimport Practice from \"../Practice/Practice.js\";\nimport TodoCount from \"../TodoCount/TodoCount.js\";\nimport TodoList from \"../TodoList/TodoList.js\";\nimport InputTodo from \"../InputTodo/InputTodo.js\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./TodoContainer.css\";\nimport AlertButton from \"../Practice/AlertButton.js\";\nimport { Route, Switch } from \"react-router-dom\";\nimport About from \"../../Pages/About.js\";\nimport NotMatch from \"../../Pages/NotMatch.js\";\nimport Navbar from \"../../component/Navbar.js\";\nimport Contact from \"../../Pages/Contact.js\";\n\nclass TodoContainer extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      todos: [],\n    };\n  }\n\n  handleChange = (id) => {\n    console.log(\"checkbox clicked:\", id);\n\n    //Wichtig: State niemals direkt ändern:\n    //this.state.todos = []; // SO NICHT\n\n    //Funktion zum Ändern des states\n    //erwartet ein Object als Parameter\n\n    //Schreibweise ohne Ternären Operator\n    this.setState({\n      todos: this.state.todos.map((todoObj) => {\n        if (todoObj.id === id) {\n          return {\n            ...todoObj,\n            completed: !todoObj.completed,\n          };\n        }\n        return todoObj;\n      }), // END of map\n    });\n\n    // Schreibweise mit Ternären Operator\n\n    // this.setState({\n    //   todos: this.state.todos.map( todoObj =>{\n    //     return {\n    //       ...todoObj,\n\n    //       // invertiere completed (false wird true und true wird false)\n    //       // wenn die ID des todoObj der id entspricht, die dem Handler (handleChange)\n    //       // übergeben wurde\n    //       completed: todoObj.id === id ? !todoObj.completed : todoObj.completed\n    //     }\n    //   })\n    // });\n\n    //❗Todo❗ in Zukunft: setState updater bzw callback benutzen\n    // Warum? Siehe unten bei Erklärungen\n  };\n\n  addTodo = (title) => {\n    console.log(title);\n\n    const newTodo = {\n      id: uuidv4(),\n      title: title,\n      completed: false,\n    };\n    this.setState({\n      todos: [newTodo, ...this.state.todos],\n    });\n\n    // [...this.state.todos, newTodo]\n    // kopiert sozusagen unser todosArray und fügt\n    // unserer newTodo als erstes Element hinzu\n  };\n\n  delTodo = (id) => {\n    // hier speichern wir das state-obj\n    // in einer Variable\n\n    const newTodos = this.state.todos.filter((todo) => {\n      return todo.id !== id;\n    });\n\n    this.setState({ todos: newTodos });\n\n    // Todo Zukunft: Hier eigentlich wieder besser: callback\n    // function als Parameter für setState\n  };\n  componentDidMount() {\n    fetch(\"http://localhost:3001/todos\")\n      .then(res => res.json())\n      .then((jsonData) => {\n        this.setState({\n          todos: jsonData,\n        });\n      });\n  }\n\n  componentDidUpdate(previousProps, previousState) {\n    // Erklärung zu componentDidUpdate siehe unten\n    console.log(\n      \"%c componentDidUpdate aus TodoContainer asugeführt\",\n      \"background: #bada55\"\n    );\n\n    // arrays können nicht direkt miteinander verglichen werden\n    // => if(previousState.todos !== this.state.todos) wäre IMMER true\n    // Stattdessen: Arrays ins String umwandeln\n    if (\n      JSON.stringify(previousState.todos) !== JSON.stringify(this.state.todos)\n    ) {\n      // Hier ist es sinnvoll, die neuen Daten/State in einer Datenbank zu speichern\n      // in unserem Fall in localStorage\n      localStorage.setItem(\"todos\", JSON.stringify(this.state.todos));\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar />\n        <Switch>\n          <Route path=\"/\" exact>\n            <div className=\"container\">\n              <div className=\"inner\">\n                <Header />\n                <InputTodo addTodoProp={this.addTodo} />\n                <TodoList\n                  todosProp={this.state.todos}\n                  handleChangeProp={this.handleChange}\n                  delTodoProp={this.delTodo}\n                />\n                <TodoCount todosProp={this.state.todos} />\n                {/* <Practice /> */}\n              </div>\n            </div>\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"*\">\n            <NotMatch />\n          </Route>\n        </Switch>\n      </>\n    );\n  }\n}\n\nexport default TodoContainer;\n\n// ToDo Container umwandeln in Functional Component unter Verwendung\n// von useEffekt-Hook: siehe https://ibaslogic.com/react-hooks-tutorial/#using-the-react-hooks-usestate\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport TodoContainer from \"./component/TodoContainer/TodoContainer\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./App.css\";\n\n//const reactElement = <p>Hallo aus index.js!</p>; // intern: React.createElement('h1',...)\n\n// Rendert unsere Components/React-Elemente im DOM\n// hier wird es an das HTML Element #root hinzugefügt\n// (siehe public -> index.html -> <body>)\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <TodoContainer />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\") // Füge TodoContainer im DOM zum div mit ID \"root\" hinzu\n);\n"],"sourceRoot":""}